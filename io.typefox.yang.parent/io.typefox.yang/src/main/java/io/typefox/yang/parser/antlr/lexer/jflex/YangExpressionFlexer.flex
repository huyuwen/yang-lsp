/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})
%%

%{
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader, int offset) {
		yyreset(reader);
		this.offset = offset;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}

%}

%unicode
%implements org.antlr.runtime.TokenSource
%class YangExpressionFlexer
%function advance
%public
%int
%eofval{
return Token.EOF;
%eofval}

WS=[\ \n\r\t]+

ID= [a-zA-Z] [a-zA-Z0-9_\.\-]*

SINGLE_QUOTED_STRING= "'" [^']* "'"?
DOUBLE_QUOTED_STRING_ESCAPED= \\\" ([^\\\\\\\"]|\\.)* \\\"?
DOUBLE_QUOTED_STRING= \" ([^\\\"]|\\.)* \"?

%%	
{ID} { return RULE_ID; }
\:   { return Colon; }
	

{SINGLE_QUOTED_STRING} { return RULE_SQ_STRING; }

{DOUBLE_QUOTED_STRING_ESCAPED} { return RULE_DQ_STRING; }
{DOUBLE_QUOTED_STRING} { return RULE_DQ_STRING; }	

{WS} { return RULE_WS; }
