/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static io.typefox.yang.parser.antlr.internal.InternalYangParser.*;

@SuppressWarnings({"all"})
%%

%{
	public final static TokenSource createTokenSource(Reader reader) {
		return new YangFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}

%}

%unicode
%implements org.antlr.runtime.TokenSource
%class YangFlexer
%function advance
%public
%int
%eofval{
return Token.EOF;
%eofval}

WS=[\ \n\r\t]+

ML_COMMENT="/*" ~"*/"
SL_COMMENT="/""/"[^\r\n]*(\r?\n)?

ID= [a-zA-Z] [a-zA-Z0-9_\.\-]*
SINGLE_QUOTED_ID= "'" {ID} "'"?
DOUBLE_QUOTED_ID= \" {ID} \"?

STRING=[^\ \n\r\t\{\}\;\'\"]+
SINGLE_QUOTED_STRING= "'" [^']* "'"?
DOUBLE_QUOTED_STRING= \" ([^\\\"]|\\.)* \"?

%%

"action"                  {return Action; }
"anydata"                 {return Anydata; }
"anyxml"                  {return Anyxml; }
"argument"                {return Argument; }
"augment"                 {return Augment; }
"base"                    {return Base; }
"belongs-to"              {return BelongsTo; }
"bit"                     {return Bit; }
"case"                    {return Case; }
"choice"                  {return Choice; }
"config"                  {return Config; }
"contact"                 {return Contact; }
"container"               {return Container; }
 "default"                {return Default; }
 "description"            {return Description; }
 "enum"                   {return Enum; }
 "error-app-tag"          {return ErrorAppTag; }
 "error-message"          {return ErrorMessage; }
 "extension"              {return Extension; }
 "deviation"              {return Deviation; }
 "deviate"                {return Deviate; }
 "feature"                {return Feature; }
 "fraction-digits"        {return FractionDigits; }
 "grouping"               {return Grouping; }
 "identity"               {return Identity; }
 "if-feature"             {return IfFeature; }
 "import"                 {return Import; }
 "include"                {return Include; }
 "input"                  {return Input; }
 "key"                    {return Key; }
 "leaf"                   {return Leaf; }
 "leaf-list"              {return LeafList; }
 "length"                 {return Length; }
 "list"                   {return List; }
 "mandatory"              {return Mandatory; }
 "max-elements"           {return MaxElements; }
 "min-elements"           {return MinElements; }
 "module"                 {return Module; }
 "must"                   {return Must; }
 "namespace"              {return Namespace; }
 "notification"           {return Notification; }
 "ordered-by"             {return OrderedBy; }
 "organization"           {return Organization; }
 "output"                 {return Output; }
 "path"                   {return Path; }
 "pattern"                {return Pattern; }
 "position"               {return Position; }
 "prefix"                 {return Prefix; }
 "presence"               {return Presence; }
 "range"                  {return Range; }
 "reference"              {return Reference; }
 "refine"                 {return Refine; }
 "require-instance"       {return RequireInstance; }
 "revision"               {return Revision; }
 "revision-date"          {return RevisionDate; }
 "rpc"                    {return Rpc; }
 "status"                 {return Status; }
 "submodule"              {return Submodule; }
 "type"                   {return Type; }
 "typedef"                {return Typedef; }
 "unique"                 {return Unique; }
 "units"                  {return Units; }
 "uses"                   {return Uses; }
 "value"                  {return Value; }
 "when"                   {return When; }
 "yang-version"           {return YangVersion; }
 "yin-element"            {return YinElement; }
	
{ID} { return RULE_ID; }
\:   { return Colon; }
{STRING} { return RULE_STRING; }
	
{SINGLE_QUOTED_ID} { return RULE_ID; }
{SINGLE_QUOTED_STRING} { return RULE_SQ_STRING; }

{DOUBLE_QUOTED_ID} { return RULE_ID; }
{DOUBLE_QUOTED_STRING} { return RULE_DQ_STRING; }	

{ML_COMMENT} { return RULE_ML_COMMENT; }
{SL_COMMENT} { return RULE_SL_COMMENT; }
\; { return Semicolon; }
\{ { return LeftCurlyBracket; }
\} { return RightCurlyBracket; }
{WS} { return RULE_WS; }
